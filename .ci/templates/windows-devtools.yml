
jobs:
  - job: ${{ parameters.host }}
    # NOTE(compnerd) disable non-x64 builds as they are currently broken :(
    condition: eq( '${{ parameters.host }}', 'x64' )
    variables:
      sqlite.directory: $(Pipeline.Workspace)/sqlite/sqlite-${{ parameters.platform }}-${{ parameters.host }}/Library/sqlite-3.30.1
      toolchain.directory: $(Pipeline.Workspace)/toolchain-windows-x64/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain
      sdk.directory: $(Pipeline.Workspace)/sdk-${{ parameters.platform }}-${{ parameters.host }}/Developer/Platforms/${{ parameters.os }}.platform/Developer/SDKs/${{ parameters.os }}.sdk

      platform.directory: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}/Library/Developer/Platforms/${{ parameters.os }}.platform

      llbuild.version: development
      tsc.version: development
      IndexStoreDB.version: development
      SwiftPM.version: development
    steps:
      - script: |
          git config --global --add core.autocrlf false
          git config --global --add core.symlinks true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Enable symbolic links, disable line ending conversion'
      - download: current
        artifact: toolchain-windows-x64
        displayName: 'download toolchain'
      - download: current
        artifact: sdk-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download SDK'
      - download: sqlite
        artifact: sqlite-${{ parameters.platform }}-${{ parameters.host }}
        displayName: 'download SQLite'
      - checkout: self
        displayName: 'checkout compnerd/swift-build'
      - checkout: apple/swift
        displayName: 'checkout apple/swift'
      - checkout: apple/swift-llbuild
        displayName: 'checkout apple/swift-llbuild'
        path: s/llbuild
      - checkout: apple/swift-tools-support-core
        displayName: 'checkout apple/swift-tools-support-core'
        path: s/tools-support-core
      - checkout: apple/swift-package-manager
        displayName: 'checkout apple/swift-package-manager'
        path: s/swiftpm
      - checkout: apple/indexstore-db
        displayName: 'checkout apple/indexstore-db'
      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'builder@compnerd.org'

          call :ApplyPatches "%SWIFT_PR%" swift
          call :ApplyPatches "%LLBUILD_PR%" llbuild
          call :ApplyPatches "%TSC_PR%" tools-support-core
          call :ApplyPatches "%SPM_PR%" swiftpm
          call :ApplyPatches "%INDEXSTOREDB_PR%" indexstore-db

          goto :eof

          :ApplyPatches
          setlocal
          set list=%~1
          set repository=%~2
          for /F "tokens=1*" %%P in ("%list%") do (
            git -C %repository% fetch origin pull/%%P/head
            git -C %repository% cherry-pick FETCH_HEAD
            if not "%%Q" == "" call :ApplyPatches "%%Q" %repository%
          )
          endlocal
          goto :eof
        displayName: 'Apply Patches'
      - task: BatchScript@1
        inputs:
          filename: C:/Program Files (x86)/Microsoft Visual Studio/${{ parameters.VisualStudio }}/Common7/Tools/VsDevCmd.bat
          arguments: -no_logo -arch=${{ parameters.host }} -host_arch=x64
          modifyEnvironment: true
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'vsvarsall.bat'
      - script: |
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\ucrt.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\ucrt\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.modulemap "%VCToolsInstallDir%\include\module.modulemap"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\visualc.apinotes "%VCToolsInstallDir%\include\visualc.apinotes"
          copy $(Build.SourcesDirectory)\swift\stdlib\public\Platform\winsdk.modulemap "%UniversalCRTSdkDir%\Include\%UCRTVersion%\um\module.modulemap"
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Configure SDK'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
        name: python
        continueOnError: true
      - task: CmdLine@2
        inputs:
          script: |
            echo ##vso[task.prependpath]$(toolchain.directory)/usr/bin
        condition: eq( variables['Agent.OS'], 'Windows_NT' )
        displayName: 'Update PATH'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/llbuild
          cmakeArgs: -G Ninja -S $(Build.SourcesDirectory)/llbuild -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_Swift_SDK=$(sdk.directory) -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake -DCMAKE_INSTALL_PREFIX=$(platform.directory)/Developer/SharedSupport/llbuild-$(llbuild.version)/usr -DLLBUILD_SUPPORT_BINDINGS=Swift -DSQLite3_LIBRARY=$(sqlite.directory)/usr/lib/SQLite3.lib -DSQLite3_INCLUDE_DIR=$(sqlite.directory)/usr/include
        displayName: 'Configure llbuild'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/llbuild
        displayName: 'Build llbuild'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/llbuild --target install
        displayName: 'Install llbuild'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/tsc
          cmakeArgs: -G Ninja -S $(Build.SourcesDirectory)/tools-support-core -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -DCMAKE_Swift_SDK=$(sdk.directory) -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory)/TSC-development/usr
        displayName: 'Configure tools-support-core'
        enabled: false
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/tsc
        displayName: 'Build tools-support-core'
        enabled: false
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/tsc --target install
        displayName: 'Install tools-support-core'
        enabled: false
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)/indexstore-db
          cmakeArgs: -G Ninja $(Build.SourcesDirectory)/indexstore-db -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-clang.cmake -DCMAKE_Swift_SDK=$(sdk.directory) -C $(Build.SourcesDirectory)/swift-build/cmake/caches/${{ parameters.platform }}-${{ parameters.arch }}-swift-flags.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory)/IndexStoreDB-development/usr -DBUILD_SHARED_LIBS=YES -DCMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES="$(sdk.directory)/usr/lib/swift;$(sdk.directory)/usr/lib/swift/Block" -DCMAKE_CXX_FLAGS="-Xclang -fno-split-cold-code"
        displayName: 'Configure IndexStoreDB'
        enabled: false
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/indexstore-db
        displayName: 'Build IndexStoreDB'
        enabled: false
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)/indexstore-db --target install
        displayName: 'Install IndexStoreDB'
        enabled: false
      - publish: $(Build.StagingDirectory)/devtools-${{ parameters.platform }}-${{ parameters.host }}
        artifact: devtools-${{ parameters.platform }}-${{ parameters.host }}
