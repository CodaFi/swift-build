# parameters:
# host: [ 'x64' ]
# platform: [ 'linux' | 'win' ]
# triple: [ 'x86_64-unknown-linux-gnu' | 'x86_64-unknown-windows-msvc' ]

jobs:
  - job: ${{ parameters.platform }}_${{ parameters.host }}
    variables:
      install.directory: $(Build.StagingDirectory)/Library/Deveoper/Toolchains/unknown-Asserts-development.xctoolchain/usr
    # NOTE(compnerd) this is an open source project built on hosted machines, so
    # this time out is actually 6 hours.  Sadly, this is not very long given the
    # complexity of this build and the speed of the hosted machines
    timeoutInMinutes: 0
    steps:
      - script: |
          git config --global user.name 'root'
          git config --global user.email 'root@compnerd.org'

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-cmark cmark
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llvm llvm

          # NOTE(compnerd) this cannot be a shallow clone since we need to go back in time to around
          # when the branch was cut
          git clone --quiet --single-branch https://github.com/llvm-mirror/lld lld
          # NOTE(compnerd) This corresponds to SVN r350253 which is the commit closes to SVN r350374
          # where the current stable branch was cut.
          git -C lld checkout 997d79fe31b96246ca4ef54cb082a8ec0d756ede

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-lldb lldb
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-clang clang
          git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift swift
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
        displayName: 'Fetch Sources'
      - ${{ if eq( variables['Agent.OS'], 'Windows_NT' ) }}:
        - task: BatchScript@1
          inputs:
            filename: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/VsDevCmd.bat
            arguments: -no_logo -arch=${{ parameters.platform }} -host_arch=x64
            modifyEnvironment: true
          displayName: 'vcvarsall.bat'
      - script: python -m pip install --upgrade flake8
        displayName: 'Install flake8'
        enabled: 'false'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\llvm
          # TODO(compnerd) make the cache dependent on the host
          cmakeArgs: $(Build.SourcesDirectory)\llvm -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$(install.directory) -DLLVM_DEFAULT_TARGET_TRIPLE=$(parameters.triple) -DLLVM_ENABLE_ASSERTIONS=YES -C $(Build.SourcesDirectory)\cmake\caches\$(parameters.platform)-x86_64.cmake -C $(Build.SourcesDirectory)\cmake\caches\org.compnerd.dt.cmake
        displayName: 'Configure LLVM/clang'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\llvm
        displayName: 'Build LLVM/clang'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\llvm --target install
        displayName: 'Install LLVM/clang'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)\Library
          parallel: true
          parallelCount: 8
          artifactName: toolchain
