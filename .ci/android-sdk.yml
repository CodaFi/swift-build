name: 'android SDK'
variables:
  install.directory: $(Build.StagingDirectory)\Library\Developer\Platforms\Android.platform\Developer\SDKs\Android.sdk\usr
  icu.directory: $(System.ArtifactsDirectory)\icu-android-arm64\ICU-64
  toolchain.directory: $(System.ArtifactsDirectory)\toolchain\Developer\Toolchains\unknown-Asserts-development.xctoolchain
jobs:
  - job: android
    timeoutInMinutes: 0
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - script: |
          git config --global user.name 'builder'
          git config --global user.email 'root@compnerd.org'

          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-llvm llvm
          git clone --config core.autocrlf=false --config core.symlinks=true --quiet --depth 1 --single-branch https://github.com/apple/swift swift
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation
          git clone --quiet --depth 1 --single-branch https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest

          # git clone --quiet --depth 1 --single-branch https://gitlab.gnome.org/GNOME/libxml2.git libxml2
          git clone --quiet --depth 1 --single-branch --branch cmake https://github.com/compnerd/libxml2.git libxml2

          git clone --quiet --depth 1 --single-branch https://github.com/curl/curl.git curl
        displayName: 'Fetch Sources'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          allowPartiallySucceededBuilds: true
          pipeline: 1
          artifactName: 'toolchain'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install toolchain'
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: specific
          project: '3133d6ab-80a8-4996-ac4f-03df25cd3224'
          allowPartiallySucceededBuilds: true
          pipeline: 9
          artifactName: 'icu-android-arm64'
          downloadPath: '$(System.ArtifactsDirectory)'
        displayName: 'Install ICU'
      - task: BatchScript@1
        inputs:
          filename: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat
          arguments: -no_logo -arch=x64
          modifyEnvironment: true
        displayName: 'vsvarsall.bat'
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '2.7.x'
      - script: |
          echo "##vso[task.setvariable variable=PATH]$(System.ArtifactsDirectory)\\toolchain\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr\\bin;%PATH%"
        displayName: 'Update PATH'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\llvm
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\android-aarch64.cmake $(Build.SourcesDirectory)\llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_HOST_TRIPLE=aarch64-unknown-linux-android
        displayName: 'Configure LLVM'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\swift-stdlib
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\android-aarch64.cmake -C $(Build.SourcesDirectory)\cmake\caches\swift-stdlib-android-aarch64.cmake $(Build.SourcesDirectory)\swift -DCMAKE_BUILD_TYPE=Release -DLLVM_DIR=$(Build.StagingDirectory)\llvm\lib\cmake\llvm -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$(toolchain.directory)\usr\bin -DCMAKE_INSTALL_PREFIX=$(install.directory) -DSWIFT_ANDROID_aarch64_ICU_UC_INCLUDE=$(icu.directory)\usr\include\unicode -DSWIFT_ANDROID_aarch64_ICU_UC=$(icu.directory)\usr\lib\libicuuc.so -DSWIFT_ANDROID_aarch64_ICU_I18N_INCLUDE=$(icu.directory)\usr\include -DSWIFT_ANDROID_aarch64_ICU_I18N=$(icu.directory)\usr\lib\libicuin.so
        displayName: 'Configure Swift standard library'
        continueOnError: true
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift-stdlib
        displayName: 'Build Swift standard library'
        continueOnError: true
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift-stdlib --target install
        displayName: 'Install Swift standard library'
        continueOnError: true
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.StagingDirectory)\swift-corelibs-libdispatch-android-aarch64
          cmakeArgs: -G Ninja -C $(Build.SourcesDirectory)\cmake\caches\android-aarch64.cmake $(Build.SourcesDirectory)\swift-corelibs-libdispatch -DSWIFT_ANDROID_SDK=$(Build.StagingDirectory)\Library\Developer\Platforms\Android.platform\Developer\SDKs\Android.sdk -C $(Build.SourcesDirectory)\cmake\caches\libdispatch-android-aarch64.cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_SWIFT_COMPILER=swiftc -DCMAKE_INSTALL_PREFIX=$(install.directory) -DENABLE_TESTING=NO -DENABLE_SWIFT=YES
        displayName: 'Configure libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift-corelibs-libdispatch-android-aarch64
        displayName: 'Build libdispatch'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.StagingDirectory)\swift-corelibs-libdispatch-android-aarch64 --target install
        displayName: 'Install libdispatch'
      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: $(Build.StagingDirectory)\Library
          artifactName: sdk
