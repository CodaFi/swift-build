trigger:
  batch: yes
  branches:
    include:
      - master

pool:
  vmImage: windows-2022

resources:
  repositories:
    - repository: apple/llvm-project
      endpoint: GitHub
      name: apple/llvm-project
      ref: refs/heads/stable/20211026
      type: github
    - repository: apple/swift-cmark
      endpoint: GitHub
      name: apple/swift-cmark
      ref: refs/heads/main
      type: github
    - repository: apple/swift
      endpoint: GitHub
      name: apple/swift
      ref: refs/heads/main
      type: github
    - repository: apple/swift-corelibs-libdispatch
      endpoint: GitHub
      name: apple/swift-corelibs-libdispatch
      ref: refs/heads/main
      type: github
    - repository: apple/swift-experimental-string-processing
      endpoint: GitHub
      name: apple/swift-experimental-string-processing
      ref: refs/heads/main
      type: github
    - repository: unicode-org/icu
      endpoint: GitHub
      name: unicode-org/icu
      ref: refs/heads/maint/maint-69
      type: github
    - repository: madler/zlib
      endpoint: GitHub
      name: madler/zlib
      ref: refs/heads/master
      type: github
    - repository: curl/curl
      endpoint: GitHub
      name: curl/curl
      ref: refs/tags/curl-7_77_0
      type: github

stages:
  - stage: build_tools
    dependsOn: []
    jobs:
      - job: x64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift-cmark
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: apple/swift-corelibs-libdispatch
            fetchDepth: 1
          - task: BatchScript@1
            inputs:
              filename: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/0
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D LLVM_ENABLE_ASSERTIONS=NO
                -D LLVM_ENABLE_LIBEDIT=NO
                -D LLVM_ENABLE_PROJECTS="clang;lldb"
                -D LLVM_EXTERNAL_PROJECTS="cmark;swift"
                -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=$(Build.SourcesDirectory)/swift-cmark
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -D LLDB_ENABLE_PYTHON=NO
                -D LLDB_INCLUDE_TESTS=NO
                -D SWIFT_INCLUDE_DOCS=NO
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO
                -D SWIFT_BUILD_STATIC_STDLIB=NO
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO
                -D SWIFT_BUILD_STATIC_SDK_OVERLAY=NO
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target llvm-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target clang-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target lldb-tblgen
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target llvm-config
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/0 --target swift-def-to-yaml-converter
          - task: CMake@1
            inputs:
             cmakeArgs:
               --build $(Agent.BuildDirectory)/0 --target swift-serialize-diagnostics
          - script: |
              md $(Build.StagingDirectory)\build-tools\bin
              copy $(Agent.BuildDirectory)\0\bin\llvm-tblgen.exe $(Build.StagingDirectory)\build-tools\bin\llvm-tblgen.exe
              copy $(Agent.BuildDirectory)\0\bin\clang-tblgen.exe $(Build.StagingDirectory)\build-tools\bin\clang-tblgen.exe
              copy $(Agent.BuildDirectory)\0\bin\lldb-tblgen.exe $(Build.StagingDirectory)\build-tools\bin\lldb-tblgen.exe
              copy $(Agent.BuildDirectory)\0\bin\llvm-config.exe $(Build.StagingDirectory)\build-tools\bin\llvm-config.exe
              copy $(Agent.BuildDirectory)\0\bin\swift-def-to-yaml-converter.exe $(Build.StagingDirectory)\build-tools\bin\swift-def-to-yaml-converter.exe
              copy $(Agent.BuildDirectory)\0\bin\swift-serialize-diagnostics.exe $(Build.StagingDirectory)\build-tools\bin\swift-serialize-diagnostics.exe
          - publish: $(Build.StagingDirectory)/build-tools/bin
            artifact: build-tools

  - stage: build_toolchain
    dependsOn: [build_tools]
    jobs:
      - job: x64
        steps:
          - download: build-tools
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: apple/llvm-project
            fetchDepth: 1
          - checkout: apple/swift-cmark
            fetchDepth: 1
          - checkout: apple/swift
            fetchDepth: 1
          - checkout: apple/swift-corelibs-libdispatch
            fetchDepth: 1
          - checkout: apple/swift-experimental-string-processing
            fetchDepth: 1
          - task: BatchScript@1
            inputs:
              filename: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/1
                -C $(Build.SourcesDirectory)/swift/cmake/caches/Windows-x86_64.cmake
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/llvm-project/llvm
                -D PACKAGE_VENDOR=compnerd.org
                -D CLANG_VENDOR=compnerd.org
                -D CLANG_VENDOR_UTI=org.compnerd.dt
                -D SWIFT_VENDOR=compnerd.org
                -D LLVM_APPEND_VC_REV=NO
                -D LLVM_VERSION_SUFFIX=""
                -D LLDB_PYTHON_RELATIVE_PATH=lib/site-packages
                -D SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIAL_PROGRAMMING=YES
                -D SWIFT_ENABLE_EXPERIMENTAL_STRING_PROCESSING=YES
                -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=$(Build.SourcesDirectory)/swift-cmark
                -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=$(Build.SourcesDirectory)/swift
                -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=$(Build.SourcesDirectory)/swift-corelibs-libdispatch
                -D EXPERIMENTAL_STRING_PROCESSING_SOURCE_DIR=$(Build.SourcesDirectory)/swift-experimental-string-processing
                -D LLVM_USE_HOST_TOOLS=NO
                -D LLVM_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/llvm-tblgen.exe
                -D CLANG_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/clang-tblgen.exe
                -D LLDB_TABLEGEN=$(Pipeline.Workspace)/build-tools/bin/lldb-tblgen.exe
                -D LLVM_CONFIG_PATH=$(Pipeline.Workspace)/build-tools/bin/llvm-config.exe
                -D SWIFT_NATIVE_SWIFT_TOOLS_PATH=$(Pipeline.Workspace)/build-tools/bin
                -D LLVM_PARALLEL_LINK_JOBS=2
                -D SWIFT_PARALLEL_LINK_JOBS=2
                -D SWIFT_BUILD_DYNAMIC_STDLIB=NO
                -D SWIFT_BUILD_DYNAMIC_SDK_OVERLAY=NO
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/1 --target distribution
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/1 --target install-distribution-stripped
          - publish: $(Build.StagingDirectory)/Library
            artifact: toolchain-windows-x64

  - stage: icu
    dependsOn: []
    jobs:
      - job: x64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: self
            fetchDepth: 1
          - checkout: unicode-org/icu
          - script: |
              copy $(Build.SourcesDirectory)\swift-build\cmake\ICU\CMakeLists69.txt $(Build.SourcesDirectory)\icu\icu4c\CMakeLists.txt
          - task: BatchScript@1
            inputs:
              filename: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/icu-69.1
                -D BUILD_SHARED_LIBS=YES
                -D BUILD_TOOLS=YES
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/icu-69.1/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/icu/icu4c
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/icu-69.1 --target install
          - publish: $(Build.StagingDirectory)/icu-69.1
            artifact: icu-x64-69.1

  - stage: zlib
    dependsOn: []
    jobs:
      - job: x64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: madler/zlib
            fetchDepth: 1
          - task: BatchScript@1
            inputs:
              filename: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/zlib-1.2.11
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/zlib-1.2.11/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D SKIP_INSTALL_FILES=YES
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/zlib-1.2.11
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/zlib-1.2.11 --target install
          - publish: $(Build.StagingDirectory)/zlib-1.2.11
            artifact: zlib-x64-1.2.11

  - stage: curl
    dependsOn: [zlib]
    jobs:
      - job: x64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - download: zlib-x64-1.2.11
          - checkout: curl/curl
            fetchDepth: 1
          - task: BatchScript@1
            inputs:
              filename: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/curl-7.77.0
                -D BUILD_SHARED_LIBS=NO
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/curl-7.77.0/usr
                -G Ninja
                -S $(Build.SourcesDirectory)
                -D BUILD_TESTING=NO
                -D BUILD_CURL_EXE=NO
                -D CMAKE_USE_OPENSSL=NO
                -D CURL_CA_PATH=none
                -D CMAKE_USE_SCHANNEL=YES
                -D CMAKE_USE_LIBSSH2=NO
                -D HAVE_POLL_FINE=NO
                -D CURL_DISABLE_LDAP=YES
                -D CURL_DISABLE_LDAPS=YES
                -D CURL_DISABLE_TELNET=YES
                -D CURL_DISABLE_DICT=YES
                -D CURL_DISABLE_FILE=YES
                -D CURL_DISABLE_TFTP=YES
                -D CURL_DISABLE_RTSP=YES
                -D CURL_DISABLE_PROXY=YES
                -D CURL_DISABLE_POP3=YES
                -D CURL_DISABLE_IMAP=YES
                -D CURL_DISABLE_SMTP=YES
                -D CURL_DISABLE_GOPHER=YES
                -D CURL_ZLIB=YES
                -D ENABLE_UNIX_SOCKETS=NO
                -D ENABLE_THREADED_RESOLVER=NO
                -D ZLIB_ROOT=$(Pipeline.Workspace)/zlib-x64-1.2.11/Library/zlib-1.2.11/usr
                -D ZLIB_LIBRARY=$(Pipeline.Workspace)/zlib-x64-1.2.11/Library/zlib-1.2.11/usr/lib/zlibstatic.lib
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/curl-7.77.0
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/curl-7.77.0 --target install
          - publish: $(Build.StagingDirectory)/curl-7.77.0
            artifact: curl-x64-7.77.0

  - stage: sqlite
    dependsOn: []
    jobs:
      - job: x64
        steps:
          - script: |
              git config --global --add core.autocrlf false
              git config --global --add core.symlinks true
          - checkout: self

          - task: PowerShell@2
            inputs:
              targetType: 'inline'
              script: |
                curl.exe -sL "https://sqlite.org/2021/sqlite-amalgamation-3360000.zip" -o $env:TEMP\sqlite-amalgamation-3360000.zip
                New-Item -ItemType Directory -Path $(Build.SourcesDirectory)\sqlite-3.36.0
                unzip.exe -j -o $env:TEMP\sqlite-amalgamation-3360000.zip -d $(Build.SourcesDirectory)\sqlite-3.36.0
          - task: PowerShell@2
            inputs:
              targetType: inline
              script: |
                Copy-Item $(Build.SourcesDirectory)\cmake\SQLite\CMakeLists.txt -destination $(Build.SourcesDirectory)\sqlite-3.36.0\CMakeLists.txt
          - task: BatchScript@1
            inputs:
              filename: C:/Program Files/Microsoft Visual Studio/2022/Enterprise/Common7/Tools/VsDevCmd.bat
              arguments: -no_logo -arch=amd64 -host_arch=amd64
              modifyEnvironment: true
          - task: CMake@1
            inputs:
              cmakeArgs:
                -B $(Agent.BuildDirectory)/sqlite-3.36.0
                -D CMAKE_BUILD_TYPE=Release
                -D CMAKE_C_COMPILER=cl
                -D CMAKE_C_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_CXX_COMPILER=cl
                -D CMAKE_CXX_FLAGS="/GS- /Oy /Gw /Gy"
                -D CMAKE_MT=mt
                -D CMAKE_INSTALL_PREFIX=$(Build.StagingDirectory)/Library/sqlite-3.36.0/usr
                -G Ninja
                -S $(Build.SourcesDirectory)/sqlite-3.36.0
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sqlite-3.36.0
          - task: CMake@1
            inputs:
              cmakeArgs:
                --build $(Agent.BuildDirectory)/sqlite-3.36.0 --target install
          - publish: $(Build.StagingDirectory)/sqlite-3.36.0
            artifact: sqlite-x64-3.36.0